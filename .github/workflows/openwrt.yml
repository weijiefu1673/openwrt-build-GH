name: Build OpenWrt

on:
  release:
    types: [published]
  watch:
    types: [started]
#  schedule:
#  - cron: 0 8 * * 5

env:
  REPO_URL: https://github.com/sdf8057/ipq6000
  REPO_BRANCH: master
  CONFIG_FILE: zn-m2.config
  UPLOAD_FIRMWARE: true
  UPLOAD_PACKAGES: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free Disk Space
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* \
        lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
        /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* \
        /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* \
        /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
        /var/lib/mysql* /var/log/azure*"
        testing: false
          
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        #sudo rm -rf /etc/mysql /etc/php /etc/apt/sources.list.d /usr/share/dotnet /usr/local/lib/android /opt/ghc
        docker rmi $(docker images -q)
        sudo -E apt-get -yqq update
        sudo -E apt-get -yqq full-upgrade
        sudo -E apt-get -yqq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
        libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
        libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \
        nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
        python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
        texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -yqq autoremove --purge
        sudo -E apt-get -yqq autoclean
        sudo -E apt-get -yqq clean
        sudo -E systemctl daemon-reload
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Clone source code
      run: |
        git clone --depth=1 --single-branch --branch $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        echo "======================="
        lscpu | egrep "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Generate configuration file
      run: |
        cp -f $CONFIG_FILE openwrt/.config
        cd openwrt
        make defconfig
          
    - name: Download package
      run: |
        cd openwrt
        make download -j$(nproc)

    - name: Compile the firmware
      run: |
        cd openwrt
        make package/feeds/luci/luci-base/compile V=s
        make -j1 V=s

    - name: Organize files
      run: |
        cd openwrt
        mkdir -p upload/firmware
        mkdir -p upload/packages
        rm -rf $(find bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$")
        cp -rf $(find bin/targets/ -type f) upload/firmware/
        cp -rf $(find bin/packages/ -type f -name "*.ipk") upload/packages/
        
    - name: Upload firmware
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware
        path: openwrt/upload/firmware
    
    - name: Upload packages
      uses: actions/upload-artifact@main
      if: env.UPLOAD_PACKAGES == 'true'
      with:
        name: OpenWrt_packages
        path: openwrt/upload/packages
